  - name: Set up git user
    run: |
      git config --global user.name "github-actions[bot]"
      git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

  - name: Download NCAA Predictions CSV
    id: download
    run: |
      echo "Starting download of NCAA predictions data..."
      for i in {1..3}; do
        echo "Download attempt $i/3"
        if curl -fSL --connect-timeout 30 --max-time 120 -o ncaapredictions.csv https://www.thepredictiontracker.com/ncaapredictions.csv; then
          echo "Download successful on attempt $i"
          break
        else
          echo "Download failed on attempt $i"
          if [ $i -eq 3 ]; then
            echo "All download attempts failed"
            exit 1
          fi
          sleep 10
        fi
      done
      if [ ! -f ncaapredictions.csv ]; then
        echo "ERROR: Downloaded file does not exist"
        exit 1
      fi
      if [ ! -s ncaapredictions.csv ]; then
        echo "ERROR: Downloaded file is empty"
        exit 1
      fi
      if ! head -1 ncaapredictions.csv | grep -q ","; then
        echo "ERROR: Downloaded file does not appear to be a valid CSV"
        exit 1
      fi
      echo "File validation passed"
      file_size=$(stat -c%s ncaapredictions.csv)
      echo "Downloaded file size: $file_size bytes"
      echo "FILE_SIZE=$file_size" >> $GITHUB_ENV

  - name: Compute target date/slot and move CSV
    id: move
    run: |
      now_ts=$(date -u +%s)
      today=$(date -u +%Y-%m-%d)
      ts14=$(date -u -d "$today 14:00:00 UTC" +%s)
      ts21=$(date -u -d "$today 21:00:00 UTC" +%s)
      if [ "$now_ts" -ge "$ts21" ]; then
        slot="5pm"
        target_date=$(date -u +%Y%m%d)
      elif [ "$now_ts" -ge "$ts14" ]; then
        slot="10am"
        target_date=$(date -u +%Y%m%d)
      else
        slot="5pm"
        target_date=$(date -u -d 'yesterday' +%Y%m%d)
      fi
      mkdir -p data
      newfile="data/ncaapredictions_${target_date}_${slot}.csv"
      mv ncaapredictions.csv "$newfile"
      echo "NEWFILE=$newfile" >> $GITHUB_ENV
      echo "SLOT=$slot" >> $GITHUB_ENV
      echo "TARGET_DATE=$target_date" >> $GITHUB_ENV
      echo "Created $newfile"
      ls -l "$newfile"

  - name: Stage new file
    run: |
      git add "$NEWFILE"

  - name: Check CSV Changes (detect staged changes)
    id: check-csv
    run: |
      if git diff --cached --exit-code --quiet; then
        echo "NO_STAGED_CHANGES=true" >> $GITHUB_ENV
        echo "No staged changes to commit"
        if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "FORCE_UPDATE=true" >> $GITHUB_ENV
          echo "Force update requested"
        fi
      else
        echo "STAGED_CHANGES=true" >> $GITHUB_ENV
        echo "Staged changes detected"
        lines_added=$(git diff --cached --numstat | awk '{sum+=$1} END {print sum+0}')
        lines_removed=$(git diff --cached --numstat | awk '{sum+=$2} END {print sum+0}')
        echo "LINES_ADDED=$lines_added" >> $GITHUB_ENV
        echo "LINES_REMOVED=$lines_removed" >> $GITHUB_ENV
        echo "Lines added: $lines_added, Lines removed: $lines_removed"
      fi

  - name: Commit & Push (direct to main)
    if: env.STAGED_CHANGES == 'true' || github.event_name == 'workflow_dispatch' || env.FORCE_UPDATE == 'true'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    run: |
      git fetch origin main
      git checkout main
      git pull --ff-only
      if git diff --cached --exit-code --quiet; then
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "$FORCE_UPDATE" = "true" ]; then
          msg="chore: Manual (or forced) NCAA predictions CSV (${TARGET_DATE}_${SLOT}) - File size: ${FILE_SIZE} bytes"
          git commit --allow-empty -m "$msg"
        else
          echo "No changes to commit"; exit 0
        fi
      else
        msg="chore: Update NCAA predictions CSV (${TARGET_DATE}_${SLOT}) - File size: ${FILE_SIZE} bytes"
        if [ -n "$LINES_ADDED" ] && [ -n "$LINES_REMOVED" ]; then
          msg="${msg} (+${LINES_ADDED}/-${LINES_REMOVED} lines)"
        fi
        git commit -m "$msg"
      fi
      git push origin main
      echo "Push complete"
      git log -1 --oneline

  - name: Upload CSV artifact
    uses: actions/upload-artifact@v4
    with:
      name: ncaapredictions-${{ env.TARGET_DATE }}-${{ env.SLOT }}
      path: ${{ env.NEWFILE }}
      if-no-files-found: error
      retention-days: 7

  - name: Install rclone
    run: |
      curl https://rclone.org/install.sh | sudo bash

  - name: Set up rclone config
    run: |
      mkdir -p ~/.config/rclone
      echo "${{ secrets.RCLONE_CONF_B64 }}" | base64 -d > ~/.config/rclone/rclone.conf
      chmod 600 ~/.config/rclone/rclone.conf

  - name: Verify rclone remote
    run: |
        rclone about gdrive: || { echo "Remote test failed"; exit 1; }

  - name: Upload file to Google Drive
    run: |
      echo "Uploading $NEWFILE to Drive folder"
      rclone copy "$NEWFILE" "gdrive:1nFUtLKXikwync8raV3xIh7mTWmawl-Y4" -v
      echo "Upload complete"

  - name: No changes detected (informational)
    if: env.NO_STAGED_CHANGES == 'true' && github.event_name != 'workflow_dispatch' && env.FORCE_UPDATE != 'true'
    run: echo "No CSV changes detected; nothing committed."

  - name: Cleanup and Data Retention
    if: always()
    run: |
      rm -f ncaapredictions.csv || true
      echo "Current data directory contents:"
      ls -la data/ || true

  - name: Job Summary
    if: always()
    run: |
      echo "## NCAA Predictions Update Summary" >> $GITHUB_STEP_SUMMARY
      echo "- Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
      echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
      echo "- Date (UTC): $(date -u)" >> $GITHUB_STEP_SUMMARY
      echo "- Target Date/Slot: ${TARGET_DATE}_${SLOT}" >> $GITHUB_STEP_SUMMARY
      if [ -n "$FILE_SIZE" ]; then
        echo "- Downloaded File Size: ${FILE_SIZE} bytes" >> $GITHUB_STEP_SUMMARY
      fi
      if [ "$STAGED_CHANGES" = "true" ]; then
        echo "- Changes: ✅ New/updated data committed to main" >> $GITHUB_STEP_SUMMARY
        if [ -n "$LINES_ADDED" ] && [ -n "$LINES_REMOVED" ]; then
          echo "- Diff: +${LINES_ADDED}/-${LINES_REMOVED} lines" >> $GITHUB_STEP_SUMMARY
        fi
      elif [ "$NO_STAGED_CHANGES" = "true" ]; then
        echo "- Changes: ⚠️ No data difference (file still archived as artifact)" >> $GITHUB_STEP_SUMMARY
      fi
        echo "- Drive Upload: Attempted" >> $GITHUB_STEP_SUMMARY
      echo "- Status: ✅ Workflow completed" >> $GITHUB_STEP_SUMMARY

  - name: Failure Notification
    if: failure()
    run: |
      echo "## ❌ NCAA Predictions Update Failed" >> $GITHUB_STEP_SUMMARY
      echo "- Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
      echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
      echo "- Date (UTC): $(date -u)" >> $GITHUB_STEP_SUMMARY
      echo "- Status: ❌ Failure" >> $GITHUB_STEP_SUMMARY
      echo "Check logs for details." >> $GITHUB_STEP_SUMMARY